" For ideavimrc vim config
" https://github.com/JetBrains/ideavim

""" Map leader to space ---------------------
let mapleader="z"

""" Plugins  --------------------------------
set surround
set multiple-cursors
"set commentary
"set argtextobj
"set easymotion
"set textobj-entire
"set ReplaceWithRegister
set smartcase
set autoindent                  "啟用自動縮排"
set smartindent

""" Common settings -------------------------
set showmode
set so=5
set incsearch               "Do incremental searching.
set nu

""" Idea specific settings ------------------
set ideajoin                " https://github.com/JetBrains/ideavim/wiki/%60ideajoin%60-examples
set ideastatusicon=gray
set idearefactormode=keep
set ideamarks               " https://youtrack.jetbrains.com/issue/VIM-959
set relativenumber          " https://intellij-support.jetbrains.com/hc/en-us/community/posts/360008429240-How-To-Enable-Relative-Line-Numbers-With-IdeaVim
set number 
"set syntax on
set hlsearch                "搜尋結果顯示高亮
" https://youtrack.jetbrains.com/issue/VIM-1970
" https://github.com/machakann/vim-highlightedyank
set highlightedyank
let g:highlightedyank_highlight_duration = 3000

""" Navigator Key mappings ----------------------------
nmap ff :action ActivateProjectToolWindow<CR>
" Go to the declaration
nmap zf :action GotoDeclaration<CR>
imap zf <Esc>:action GotoDeclaration<CR>

" parameter declaration
nmap zF :action RdParameterDeclarationNavigationAction<CR>
imap zF <Esc>:action RdParameterDeclarationNavigationAction<CR>

" Back to prev position
nmap zk :action Back<CR>
imap zk <Esc>:action Back<CR>

" Forward to next position
nmap zj :action Forward<CR>
imap zj <Esc>:action Forward<CR>

" Go to next error"
nmap zn :action GotoNextError<CR>
nmap zsn :action ReSharperGotoPrevErrorInSolution<CR>

" Move cursor to next/prev member
map <A-j> :action MethodDown<CR>
map <A-k> :action MethodUp<CR>

" 移到行頭
:nmap zh ^
:imap zh <Esc>^i

" 移到行尾
:nmap zl $
:imap zl <End>

" 往上捲一頁
:nmap zzk <C-b><Esc>

" 往下捲一頁
:nmap zzj <C-f><Esc>

"取消插入模式
:imap jj <Esc>

"Vim搜尋結果居中展示"
nnoremap n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" 將遊標所在行拉到畫面上方
:nmap ztt z<CR>2k2j

""" Edit Key mappings ----------------------------
" Move cursor line up/down"
map <A-down> :action MoveLineDown<CR>:action VimAutoIndentLines<CR>
map <A-up> :action MoveLineUp<CR>:action VimAutoIndentLines<CR>

" Code clean up"
nmap zec :action SilentCodeCleanup<CR>zz
imap zec <Esc>:action SilentCodeCleanup<CR>zz

"Reformat Code
nmap zer :action ReformatCode<CR>
imap zer <Esc>:action ReformatCode<CR>

" Open surround with window"
vmap S :action SurroundWithLiveTemplate<CR>

"模擬 Back Space
nmap <BS> a<BS>

"將整行剪下並移到開頭
:nmap hc ^C

"剪下整行並恢復到 Normal Mode
:imap zd <Esc>dd

" 存檔並離開檔案 
nmap zq :wq<CR>
nmap qq :wq<CR>

"剪下標籤內的內容
:nmap zb ciw
:vmap zb <Esc>ciw

" 剪下一整行 (Ctrl + x)"
imap <C-x> <Esc>dd

" 全選所有內容 (Ctrl + a)
imap <C-a> <Esc>ma<CR>ggVG
nmap <C-a> <Esc>ma<CR>ggVG
map <leader>sa ggVG"

"縮排及按鍵對應"
vnoremap < <gv
vnoremap > >gv

" 移到行尾並加上分號(;)
nmap z; $a;<Esc>
imap z; <Esc>$a;

" 選取兩個小括號之間的內容"
:nmap z, vi)
:nmap z) vi)

" 選取兩個大括號之間的內容"
nmap z} vi}
nmap z. vi}

" 選取兩個 tag 之間的內容"
nmap z> vit

" 剪下兩個 tag 之間的內容"
nmap c> cit

" 選取兩個分號之間的內容"
nmap z" vi"

" 剪下兩個分號之間的內容"
:nmap zcc ci"

" 剪下兩個中括號間的內容"
:nmap zxx ci]
" 剪下兩個分號之間的內容，包含分號
:nmap zaa ca"

" 將所在行搬到第一個 public method 裡"
nmap <A-x> dd?class<CR>/public<CR>/{<CR>p:action ReformatCode<CR>

"在下一個 > 符號插入斷行
nmap zss f>a<CR><Esc>

""" Unit Test Key mappings ----------------------------
" Copy 上一個 unit test 的所有內容"
imap <F1> <Esc>may?[T<CR>`ap?public<CR>$Bzz
nmap <F1> may?[T<CR>`ap?void<CR>$Bzz

" Run unit test for solution"
nmap zra zz:action RiderUnitTestRunSolutionAction<CR>
imap zra <Esc>zz:action RiderUnitTestRunSolutionAction<CR>

" Run the current unit test
nmap zru mz?public <CR>:action RiderUnitTestRunContextAction<CR>
imap zru <Esc>mz?public <CR>:action RiderUnitTestRunContextAction<CR>

" Run the cover unit test
nmap zrc mz?class <CR>:action RiderUnitTestCoverContextAction<CR>
imap zrc <Esc>mz?class <CR>:action RiderUnitTestCoverContextAction<CR>

" Run the last execution unit test
nmap zrl zz:action RiderUnitTestRepeatPreviousRunAction<CR>
imap zrl <Esc>zz:action RiderUnitTestRepeatPreviousRunAction<CR>

" 將遊標所在行搬到新的 Setup 裡"
nmap zts dd?class<CR>jo[SetUp]<CR>public<Space>void<Space>SetUp(){<CR>}<Esc>P:action SilentCodeCleanup<CR>

" 將所在行搬到 Setup "
nmap ztx dd?SetUp<CR>/{<CR>jp:action ReformatCode<CR>
Assert.AreEqual(expected,actual);

" 插入 Assert.AreEqual"
imap zte Assert.AreEqual(expected,actual);<Esc>T(
nmap zte aAssert.AreEqual(expected,actual);<Esc>T(

""" Refactoring Test Key mappings ----------------------------
nmap zsr :action Refactorings.QuickListPopupAction<CR>
imap zsr <Esc>:action Refactorings.QuickListPopupAction<CR>
vmap zsr :action Refactorings.QuickListPopupAction<CR>

" Refactoring rename"
map zrr :action RenameElement<CR>

" Refactoring extract method"
nmap zrm :action ExtractMethod<CR>
vmap zrm :action ExtractMethod<CR>

" Refactoring change signature"
map zrs :action ChangeSignature<CR><Esc>

" Refactoring Safe Delete"
map zrd :action SafeDelete<CR><Esc>

" Refactoring inline"
map zri :action Inline<CR><Esc>
imap zri <Esc>:action Inline<CR><Esc>

" Refactoring introduce variable"
map zrv :action IntroduceVariable<CR><Esc>
vmap zrv <Esc>:action IntroduceVariable<CR>
imap zrv <Esc>:action IntroduceVariable<CR>

" Refactoring introduce field"
map zrf :action IntroduceField<CR><Esc>
imap zrf <Esc>:action IntroduceField<CR>

" Refactoring introduce parameter"
map zrp :action IntroduceParameter<CR><Esc>
imap zrp <Esc>:action IntroduceParameter<CR>
nmap zsp vi":action IntroduceParameter<CR>

" Refactoring move class to another namespace or folder or another file"
map zro :action Move<CR>
imap zro <Esc>:action Move<CR>

""" Tool window key mappings ----------------------------
" Jump to commit window
nmap zgc zz:action CheckinProject<CR>

" Show structure tool window"
nmap zsc :action ActivateStructureToolWindow<CR>

" Open paste multiple window"
nmap zpm :action PasteMultiple<CR>
imap zpm <Esc>:action PasteMultiple<CR>

"Open file structure popup window"
nmap ,m :action FileStructurePopup<CR>
:nmap ,m :action ReformatCode<CR>:action FileStructurePopup<CR>

"Open go to file window"
nmap ,t :action GotoFile<CR>

"Open generate code window"
nmap ,g :action Generate<CR>

" 建立新檔案
nmap <C-n> :action NewElementSamePlace<CR>


" 以下的仍未整理---------------------------

" https://plugins.jetbrains.com/plugin/7086-acejump"
" Press `space` to activate AceJump
map <Space> :action AceAction<CR>
" Press `F` to activate Target Mode
"map F :action AceTargetAction<CR>
" Press `g` to activate Line Mode
"map g :action AceLineAction<CR>

"nmap <C-CR> mza<CR><Esc>`z
nmap <C-CR> a<CR><Esc>
nmap <D-S-CR> f,a<CR><Esc>
"nmap <M-S-CR> f,a<CR><Esc>


nmap ,p "0p
nmap ,P "0P
imap z,p <Esc>"0pa
":vmap <Esc> <Esc><Esc><Esc>
:nmap <BS> a<BS>
imap <F1> <Esc>ztmay?[T<CR>`ap?void<CR>w
nmap <F1> ztmay?[T<CR>`ap?void<CR>w
imap <A-F1> <Esc>may?[F<CR>`ap?void<CR>wzz
nmap <A-F1> may?[F<CR>`ap?void<CR>wzz


vmap M :action VimVisualSwapSelections<CR>:action ExtractMethod<CR><ESC>
"vmap M :<bs><bs><bs><bs><bs>action VimVisualSwapSelections<CR>:action ExtractMethod<CR><ESC>
map zrt :action ReformatCode<CR>:action SearchEverywhere<CR>
imap zrt <Esc>:action SearchEverywhere<CR>
map <C-D> :action EditorDuplicateLines<CR>
imap <C-D> <Esc>:action EditorDuplicateLines<CR>
map <C-A-K> :action MoveLineUp<CR>:action VimAutoIndentLines<CR>
imap <C-A-K> <Esc>:action MoveLineUp<CR>:action VimAutoIndentLines<CR>
map <C-A-J> :action MoveLineDown<CR>:action VimAutoIndentLines<CR>
imap <C-A-J> <Esc>:action MoveLineDown<CR>:action VimAutoIndentLines<CR>
map <A-D> :action EditorDeleteLine<CR>
imap <A-D> <Esc>:action EditorDeleteLine<CR>

nmap zm :action BuildSolutionAction<CR>
nmap <A-u> :redo<CR>
nmap <C-w> :action SmartSelect<CR>:action VimVisualSwapSelections<CR>

nmap <C-CR> mza<CR><Esc>`z


" Don't use Ex mode, use Q for formatting.
"map Q gq

