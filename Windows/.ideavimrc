" For ideavimrc vim config
" https://github.com/JetBrains/ideavim
set smartcase

"啟用自動縮排"
set autoindent

set smartindent
set multiple-cursors
set surround

set syntax on

"啟用 NERDTree"
set NERDTree

"搜尋結果顯示高亮"
set hlsearch

" https://github.com/JetBrains/ideavim/wiki/%60ideajoin%60-examples
set ideajoin

" https://youtrack.jetbrains.com/issue/VIM-959
set ideamarks

" https://intellij-support.jetbrains.com/hc/en-us/community/posts/360008429240-How-To-Enable-Relative-Line-Numbers-With-IdeaVim
set relativenumber
set number 

" https://youtrack.jetbrains.com/issue/VIM-1970
" https://github.com/machakann/vim-highlightedyank
set highlightedyank
let g:highlightedyank_highlight_duration = 3000

map zso :source C:\users\07460.yuwei.chang\.ideavimrc<CR>

"使用 NERDTree"
nmap ff :NERDTree <CR>

" Copy 上一個 unit test 的所有內容"
imap <F1> <Esc>may?[T<CR>`ap?public<CR>$Bzz
nmap <F1> may?[T<CR>`ap?void<CR>$Bzz



" Run unit test for solution"
nmap zra zz:action RiderUnitTestRunSolutionAction<CR>
imap zra <Esc>zz:action RiderUnitTestRunSolutionAction<CR>

" Run the current unit test
nmap zru mz?public <CR>:action RiderUnitTestRunContextAction<CR>
imap zru <Esc>mz?public <CR>:action RiderUnitTestRunContextAction<CR>

" Run the cover unit test
nmap zrc mz?class <CR>:action RiderUnitTestCoverContextAction<CR>
imap zrc <Esc>mz?class <CR>:action RiderUnitTestCoverContextAction<CR>

" Run the last execution unit test
nmap zrl zz:action RiderUnitTestRepeatPreviousRunAction<CR>
imap zrl <Esc>zz:action RiderUnitTestRepeatPreviousRunAction<CR>

" Jump to commit window
nmap zgc zz:action CheckinProject<CR>

" Go to the declaration
nmap zf :action GotoDeclaration<CR>
imap zf <Esc>:action GotoDeclaration<CR>

" Back to prev position
nmap zk :action Back<CR>
imap zk <Esc>:action Back<CR>

" Forward to next position
nmap zj :action Forward<CR>
imap zj <Esc>:action Forward<CR>

nmap zsr :action Refactorings.QuickListPopupAction<CR>
imap zsr <Esc>:action Refactorings.QuickListPopupAction<CR>
vmap zsr :action Refactorings.QuickListPopupAction<CR>

" Refactoring rename"
nmap zrr :action RenameElement<CR>

" Refactoring extract method"
nmap zrm :action ExtractMethod<CR>
vmap zrm :action ExtractMethod<CR>
vmap M :action ExtractMethod<CR>

" Refactoring change signature"
map zrs :action ChangeSignature<CR><Esc>

" Refactoring Safe Delete"
map zrd :action SafeDelete<CR><Esc>

" Refactoring inline"
map zri :action Inline<CR><Esc>

" Refactoring introduce variable"
map zrv :action IntroduceVariable<CR><Esc>

" Refactoring introduce field"
map zrf :action IntroduceField<CR><Esc>

" Refactoring introduce parameter"
map zrp :action IntroduceParameter<CR><Esc>

" Refactoring move class to another namespace or folder or another file"
nmap zro :action Move<CR>

" Show structure tool window"
nmap zsc :action ActivateStructureToolWindow<CR>

" Open paste multiple window"
nmap zpm :action PasteMultiple<CR>
imap zpm <Esc>:action PasteMultiple<CR>

" Go to next error"
nmap zn :action GotoNextError<CR>

" nmap zec :action ReformatCode<CR>
" imap zrc <Esc>:action ReformatCode<CR>

" Open surround with window"
vmap S :action SurroundWithLiveTemplate<CR>

" Code clean up"
nmap zec :action SilentCodeCleanup<CR>zz
imap zec <Esc>:action SilentCodeCleanup<CR>zz

" https://plugins.jetbrains.com/plugin/7086-acejump"
" Press `space` to activate AceJump
map <Space> :action AceAction<CR>
" Press `F` to activate Target Mode
"map F :action AceTargetAction<CR>
" Press `g` to activate Line Mode
"map g :action AceLineAction<CR>


nmap <BS> a<BS>
"移到行頭"
nmap hh ^
"移到行尾"
nmap ll $
"往上捲一頁"
nmap zzk <C-b>
"往下捲一頁"
nmap zzj <C-f> 

imap zl <End>
"imap jj <Esc>
"imap zh <Esc>^i

" 將整行剪下並移到開頭"
nmap hc ^C

" 恢復到 Normal Mode 並剪下整行"
imap zd <Esc>dd

" 存檔並離開檔案 
nmap zq :wq<CR>
nmap qq :wq<CR>

nmap zb ciw

" 剪下一整行
imap <C-x> <Esc>dd

" 全選所有內容 Ctrl + a"
imap <C-a> <Esc>ma<CR>ggVG
nmap <C-a> <Esc>ma<CR>ggVG
map <leader>sa ggVG"

"縮排及按鍵對應"
vnoremap < <gv      
vnoremap > >gv

"Vim搜尋結果居中展示"
nnoremap n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" 將遊標所在行拉到畫面上方
nmap zt zt2k2j

" 移到行尾並加上分號"
nmap z; $a;<Esc>
imap z; <Esc>$a;

"Open file structure popup window"
nmap ,m :action FileStructurePopup<CR>

"Open go to file window"
nmap ,t :action GotoFile<CR>

"Open generate code window"
nmap ,g :action Generate<CR>

" 選取兩個小括號之間的內容"
nmap z, vi)
nmap z) vi)

" 選取兩個大括號之間的內容"
nmap z} vi}
nmap z. vi}

" 選取兩個 tag 之間的內容"
nmap z> vit

" 剪下兩個 tag 之間的內容"
nmap c> cit

" 選取兩個分號之間的內容"
nmap z" vi"

" 剪下兩個分號之間的內容"
nmap zcc ci"

" 剪下兩個分號之間的內容(包含前後分號)"
nmap zaa ca"

" 剪下兩個中括號([])之間的內容"
nmap zxx ci]

" 選取兩個中括號之間的內容"
nmap z] vi]

"nmap ,p "0p
"nmap ,P "0P
"imap z,p <Esc>"0pa
"imap z,P <Esc>"0Pa

" insert single char
":map ,i i?<Esc>r

" append single char
":map ,a a?<Esc>r

" Ctrl + x"
imap <C-x> <Esc>dd

" 加一個 constructor method, 在 rider 可以用 `,g` generate code"
"nmap <A-s> "add?class<CR>w"bywjopublic void <Esc>"bpa (){}<Left><CR><Esc>"ap:action ReformatCode<CR>

" 將所在行搬到第一個 public method 裡"
nmap <A-x> dd?class<CR>/public<CR>/{<CR>p:action ReformatCode<CR>

" 將遊標所在行搬到新的 Setup 裡"
nmap zts dd?class<CR>jo[SetUp]<CR>public<Space>void<Space>SetUp(){<CR>}<Esc>P:action ReformatCode<CR>

" 將所在行搬到 Setup "
nmap ztx dd?SetUp<CR>/{<CR>jp:action ReformatCode<CR>

nmap <C-n> :action NewElementSamePlace<CR>

"nmap <C-CR> mza<CR><Esc>`z
nmap <C-CR> a<CR><Esc>
nmap <D-S-CR> f,a<CR><Esc>
"nmap <M-S-CR> f,a<CR><Esc>

nmap zss f>a<CR><Esc>
